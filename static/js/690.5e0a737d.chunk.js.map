{"version":3,"file":"static/js/690.5e0a737d.chunk.js","mappings":"8LAEA,MCFmE,GAAgBA,eDE9D,CACjBC,KAAM,kBACNC,QAAS,yaAMTC,YAAa,sQACbC,YAAa,uBACbC,IAAK,wOAkBLC,QAAS,CACLC,QAAQ,EACRC,UAAW,wBACXC,MAAO,wGAKPC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,6IACbS,KAAM,8hDA4CNC,MAAO,CAAC,CACRZ,KAAM,kBACNG,YAAa,mCACbU,gBAAiB,0DACjBC,U,SACF,CACEd,KAAM,OACNG,YAAa,OACbW,U,eC5FSC,EAAW,CAAC,KAAO,kBAAkB,QAAU,QAAQ,gBAAe,EAAK,aAAa,mBAAmB,QAAU,CAAC,CAAC,KAAO,kBAAkB,QAAU,oDAAoD,YAAc,sQAA+C,YAAc,yB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_create-deferred';\nimport * as component_2 from 'antd';\nconst readmeConfig = {\n    name: `create-deferred`,\n    summary: `<h1>create-deferred</h1>\n<h3>描述</h3>\n<p>用于创建一个每次只允许一定数量并发执行的函数，如果执行时超过边界值则超过部分会排队执行.</p>\n<h3>安装</h3>\n<pre><code class=\"language-shell\">npm i --save @kne/create-deferred\n</code></pre>`,\n    description: `用于创建一个每次只允许一定数量并发执行的函数，如果执行时超过边界值则超过部分会排队执行.`,\n    packageName: `@kne/create-deferred`,\n    api: `<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: false,\n        className: `create_deferred_e347d`,\n        style: `.create_deferred_e347d .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `演示创建100个运行时间随机0~1000ms任务，4个任务并行执行`,\n    code: `const { default: createDeferred } = _CreateDeferred;\nconst { Button, Flex } = antd;\nconst { useState } = React;\n\nconst BaseExample = () => {\n  const [runningTask, setRunningTask] = useState(new Map());\n  const [result, setResult] = useState(null);\n  return <div>\n    {result && <div>任务执行完成：结果为{JSON.stringify(result)}</div>}\n    <Flex vertical gap={10}>\n      {Array.from(runningTask.values()).map((index) => {\n        return <div key={index}>任务{index}正在执行....</div>;\n      })}\n    </Flex>\n    <Button onClick={async () => {\n      const deferred = createDeferred(4);\n      setResult(null);\n      setResult(await Promise.all(Array.from({ length: 100 }).map((value, index) => {\n        return deferred(() => {\n          return new Promise((resolve) => {\n            setRunningTask((value) => {\n              const newList = new Map(value);\n              newList.set(index, index);\n              return newList;\n            });\n            const taskTime = Math.round(Math.random() * 1000);\n            setTimeout(() => {\n              resolve(\\`\\${index}任务完成,执行时间\\${taskTime}ms\\`);\n              setRunningTask((value) => {\n                const newList = new Map(value);\n                newList.delete(index);\n                return newList;\n              });\n            }, taskTime);\n          });\n        });\n      })));\n    }}>开始执行</Button>\n  </div>;\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_CreateDeferred\",\n    packageName: \"@kne/current-lib_create-deferred\",\n    importStatement: \"import * as _CreateDeferred from \\\"@kne/create-deferred\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import CreateDeferred from '@components/create-deferred/README.md';export default {CreateDeferred};\nexport const manifest = {\"name\":\"create-deferred\",\"version\":\"0.1.0\",\"open-version\":true,\"public-url\":\"/create-deferred\",\"modules\":[{\"name\":\"create-deferred\",\"baseDir\":\"/home/runner/work/create-deferred/create-deferred\",\"description\":\"用于创建一个每次只允许一定数量并发执行的函数，如果执行时超过边界值则超过部分会排队执行.\",\"packageName\":\"@kne/create-deferred\"}]};"],"names":["CreateDeferred","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","importStatement","component","manifest"],"sourceRoot":""}